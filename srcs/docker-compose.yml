version: "3.9"

services:
  endpoint:
    container_name: endpoint
    build: ./endpoint/
    image: endpoint

    ports:
      - "80:80"
    networks:
      - "internal_microservice"

    restart: on-failure

  front:
    container_name: front
    build: ./front/
    image: front

    networks:
      - "internal_microservice"

    environment:
      LOGIN_42: ${LOGIN_42}

    restart: on-failure

  game:
    build: ./game/
    ports:
      - "8083:8080"
    networks:
      - "internal_microservice"

  login:
    build: ./login/
    ports:
      - "8080:80"
    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
    networks:
      - "internal_microservice"

  matchmaking:
    build: ./matchmaking/
    ports:
      - "8084:8080"
    networks:
      - "internal_microservice"

  users:
    build: ./users/
    ports:
      - "8081:80"
    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
    networks:
      - "internal_microservice"

  notifications:
    build: ./notifications/
    ports:
      - "8082:80"
    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
    networks:
      - "internal_microservice"

  redis: # TODO: Make it secure with credentials
    image: redis:7.2.3-alpine
    ports:
      - "6379:6379"
    networks:
      - "internal_microservice"

  database:
    container_name: database
    build: ./database/
    image: database
    # dev only port. DELETE it on release
    ports:
      - '5432:5432'
    networks:
      - "internal_microservice"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

      #    # Data persistance commented for development purposes
      #    volumes:
      #      - 'database:/var/lib/postgresql/data'

networks:
  internal_microservice:
    driver: bridge
    name: 'internal_microservice'

volumes:
  database:
    name: database
