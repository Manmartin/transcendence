version: "3.9"

services:
  endpoint:
    container_name: endpoint
    build: ./endpoint/
    image: endpoint

    ports:
      - "443:443"
      - "80:80"
    networks:
      - "internal_microservice"
    
    depends_on:
      - front
    restart: on-failure

  front:
    container_name: front
    build: ./front/
    image: front

    networks:
      - "internal_microservice"
    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development

    environment:
      LOGIN_42: ${LOGIN_42}

    depends_on:
      database:
        condition: service_healthy

    restart: on-failure

  game:
    container_name: game
    build: ./game/
    image: game

    networks:
      - "internal_microservice"

    restart: on-failure

  login:
    container_name: login
    build: ./login/
    image: login
    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
    networks:
      - "internal_microservice"

    restart: on-failure

  matchmaking:
    container_name: matchmaking
    build: ./matchmaking/
    image: matchmaking

    networks:
      - "internal_microservice"

    restart: on-failure

  users:
    container_name: users
    build: ./users/
    image: users

    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
    networks:
      - "internal_microservice"
    restart: on-failure

  notifications:
    container_name: notifications
    build: ./notifications/
    image: notifications

    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
    networks:
      - "internal_microservice"

    restart: on-failure

  redis: # TODO: Make it secure with credentials
    container_name: redis
    image: redis:7.2.3-alpine
    ports:
      - "6379:6379"
    networks:
      - "internal_microservice"

  database:
    container_name: database
    build: ./database/
    image: database
    env_file:
      - "./.env.dockerized" # All the environment, for facilitating development
      # dev only port. TODO: DELETE it on release
    ports:
      - "5432:5432"
    networks:
      - "internal_microservice"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

      #    # Data persistance commented for development purposes
      #    volumes:
      #      - 'database:/var/lib/postgresql/data'

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    restart: on-failure

networks:
  internal_microservice:
    driver: bridge
    name: "internal_microservice"

volumes:
  database:
    name: database
